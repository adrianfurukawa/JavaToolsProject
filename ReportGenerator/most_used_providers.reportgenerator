/**
    tiProviders
    Most Used Providers
    Status: Production
*/

import com.imc.imctools.tools.Libs;
import java.util.*;
import java.io.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.hibernate.Session;
import java.text.SimpleDateFormat;

String[] columns = new String[] { "PROVIDER ID", "PROVIDER NAME", "TOTAL CLAIM" };

String qry = 
		"select "
		+ "b.hpronomor, b.hproname, count(*) as cnt "
		+ "from idnhltpf.dbo.hltclm a "
		+ "inner join idnhltpf.dbo.hltpro b on b.hpronomor = a.hclmnhoscd "
		+ "where "
		+ "hclmyy=" + productPOJO.getProductYear() + " "
		+ "and hclmpono=" + productPOJO.getProductId() + " "
		+ "and hclmrecid<>'C' ";

if (period.equals("Date Range")) {
    qry += "and convert(date, convert(varchar, a.hclmcdatey) + '-' + convert(varchar, a.hclmcdatem) + '-' + convert(varchar, a.hclmcdated)) "
            + "between "
            + "'" + new SimpleDateFormat("yyyy-MM-dd").format(dStartDate.getValue()) + "' and '" + new SimpleDateFormat("yyyy-MM-dd").format(dEndDate.getValue()) + "' ";
}

if (period.equals("Month Range")) {
    Calendar calLast = Calendar.getInstance();
    calLast.set(spnEndMonthYear.getValue(), cbEndMonth.getSelectedIndex(), 1);

    qry += "and convert(date, convert(varchar, a.hclmcdatey) + '-' + convert(varchar, a.hclmcdatem) + '-' + convert(varchar, a.hclmcdated)) "
            + "between "
            + "'" + spnStartMonthYear.getValue() + "-" + (cbStartMonth.getSelectedIndex()+1) + "-1' and '" + spnEndMonthYear.getValue() + "-" + (cbEndMonth.getSelectedIndex()+1) + "-" + calLast.getActualMaximum(Calendar.DAY_OF_MONTH) + "' ";
}

if (period.equals("Year Range")) {
    qry += "and a.hclmcdatey between " + spnStartYear.getValue() + " and " + spnEndYear.getValue() + " ";
}

qry += "group by b.hpronomor, b.hproname "
		+ "order by cnt desc ";

Session s = Libs.sfDB.openSession();
try {
    List l = s.createSQLQuery(qry).list();

    Workbook wb = new HSSFWorkbook();
    Sheet sheet = wb.createSheet("Most Used Providers");
    sheet.createFreezePane(0, 1, 0, 1);
    int cnt = 0;

    org.apache.poi.ss.usermodel.Row row = sheet.createRow(cnt);

    for (int i=0; i<columns.length; i++) {
        Libs.createCell(row, i, columns[i]);
    }

    cnt++;

    for (Object[] o : l) {
        row = sheet.createRow(cnt);

        for (int i=0; i<o.length; i++) {
            Libs.createCell(row, i, o[i]);
        }

        cnt++;
    }

    FileOutputStream out = new FileOutputStream(reportPOJO.getFile());
    wb.write(out);
    out.close();
    reportPOJO.setName(productPOJO.getProductYear() + "-" + productPOJO.getProductId() + "-Most Used Providers-" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + ".xls");
} catch (Exception ex) {
    log.error("most_used_providers.reportgenerator", ex);
} finally {
    if (s!=null && s.isOpen()) s.close();
}
